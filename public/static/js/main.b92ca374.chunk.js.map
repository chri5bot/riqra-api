{"version":3,"sources":["config/index.js","client.js","styles/reset.css.js","views/Home/components/Form/index.js","views/Home/components/List/index.js","views/Home/index.js","views/NoMatch/index.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["dotenv","config","path","createClient","link","onError","_ref","graphQLErrors","networkError","map","_ref2","message","locations","console","log","concat","createUploadLink","uri","process","ApolloClient","cache","InMemoryCache","GlobalStyle","createGlobalStyle","_templateObject","GET_COMMENTS_QUERY","gql","Form_templateObject","CREATE_COMMENT_MUTATION","_templateObject2","Form","content","initialValue","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onChange","e","target","useFormInput","react_default","a","createElement","react_apollo_esm","mutation","refetchQueries","query","createComment","loading","error","onSubmit","preventDefault","variables","input","type","List_templateObject","DELETE_COMMENT_MUTATION","List_templateObject2","withRouter","fetchPolicy","data","comments","id","key","deleteComment","_ref3","style","display","marginRight","Home","history","flexDirection","justifyContent","alignItems","height","components_Form","components_List","NoMatch","Routes","react_router_dom","react_router","exact","component","App","client","routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b92ca374.chunk.js","sourcesContent":["import dotenv from \"dotenv\";\r\n\r\ndotenv.config({ path: \"../.env\" });\r\n\r\nexport const API_URL =\r\n  process.env.REACT_APP_API_URL ||\r\n  `${window.location.protocol}//${window.location.host}/api`;\r\n","import { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { onError } from \"apollo-link-error\";\r\nimport { createUploadLink } from \"apollo-upload-client\";\r\nimport { API_URL } from \"./config\";\r\n\r\nexport const createClient = () => {\r\n  const errorsLink = onError(({ graphQLErrors, networkError }) => {\r\n    if (graphQLErrors) {\r\n      graphQLErrors.map(({ message, locations, path }) =>\r\n        console.log(\r\n          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n        )\r\n      );\r\n    }\r\n\r\n    if (networkError) {\r\n      console.log(`[Network error]: ${networkError}`);\r\n    }\r\n  });\r\n\r\n  const link = errorsLink.concat(\r\n    createUploadLink({\r\n      uri: API_URL\r\n    })\r\n  );\r\n\r\n  return new ApolloClient({\r\n    link,\r\n    cache: new InMemoryCache()\r\n  });\r\n};\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\n    html, body {\r\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\r\n        font-size: 14px;\r\n        margin: 0;\r\n        padding: 0;\r\n        height: 100%;\r\n    }\r\n    body {\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n\r\n        #root {\r\n          height: 100%;\r\n        }\r\n    }\r\n\r\n    *, ::after, ::before{\r\n        box-sizing: border-box;\r\n    }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Mutation } from \"react-apollo\";\r\n\r\nconst GET_COMMENTS_QUERY = gql`\r\n  query getCommentsQuery {\r\n    comments {\r\n      id\r\n      content\r\n    }\r\n  }\r\n`;\r\n\r\nconst CREATE_COMMENT_MUTATION = gql`\r\n  mutation createCommentMutation($input: CreateCommentInput!) {\r\n    createComment(input: $input) {\r\n      id\r\n      content\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Form() {\r\n  const content = useFormInput(\"\");\r\n  return (\r\n    <Mutation\r\n      mutation={CREATE_COMMENT_MUTATION}\r\n      refetchQueries={() => {\r\n        return [{ query: GET_COMMENTS_QUERY }];\r\n      }}\r\n    >\r\n      {(createComment, { loading, error }) => (\r\n        <form\r\n          onSubmit={e => {\r\n            e.preventDefault();\r\n\r\n            if (!content && !content.value) {\r\n              return;\r\n            }\r\n\r\n            createComment({\r\n              variables: { input: { content: content.value } }\r\n            });\r\n\r\n            content.value = \"\";\r\n          }}\r\n        >\r\n          <textarea {...content} />\r\n          <button type=\"submit\">{loading ? \"espera\" : \"agregar\"}</button>\r\n        </form>\r\n      )}\r\n    </Mutation>\r\n  );\r\n}\r\n\r\nfunction useFormInput(initialValue) {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  function handleChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n\r\n  return {\r\n    value,\r\n    onChange: handleChange\r\n  };\r\n}\r\nexport default Form;\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport { Query, Mutation } from \"react-apollo\";\r\n\r\nconst GET_COMMENTS_QUERY = gql`\r\n  query getCommentsQuery {\r\n    comments {\r\n      id\r\n      content\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_COMMENT_MUTATION = gql`\r\n  mutation deleteCommentMutation($id: ID!) {\r\n    deleteComment(id: $id)\r\n  }\r\n`;\r\n\r\nconst List = () => (\r\n  <Query query={GET_COMMENTS_QUERY} fetchPolicy=\"network-only\">\r\n    {({ loading, error, data }) => {\r\n      if (loading) {\r\n        return <div>Loading...</div>;\r\n      }\r\n\r\n      if (error) {\r\n        return <p>Error</p>;\r\n      }\r\n\r\n      if (!data) {\r\n        return <p>No Data</p>;\r\n      }\r\n\r\n      return data.comments.map(({ id, content }) => {\r\n        return (\r\n          <Mutation\r\n            key={id}\r\n            mutation={DELETE_COMMENT_MUTATION}\r\n            refetchQueries={() => {\r\n              return [{ query: GET_COMMENTS_QUERY }];\r\n            }}\r\n          >\r\n            {(deleteComment, { loading, error }) => (\r\n              <div style={{ display: \"flex\" }}>\r\n                <span style={{ marginRight: \"1rem\" }}>{content} </span>\r\n                <form\r\n                  onSubmit={e => {\r\n                    e.preventDefault();\r\n                    deleteComment({\r\n                      variables: { id }\r\n                    });\r\n                  }}\r\n                >\r\n                  <button type=\"submit\">{loading ? \"espera\" : \"borrar\"}</button>\r\n                </form>\r\n              </div>\r\n            )}\r\n          </Mutation>\r\n        );\r\n      });\r\n    }}\r\n  </Query>\r\n);\r\n\r\nexport default withRouter(List);\r\n","import React from \"react\";\r\n\r\nimport Form from \"./components/Form\";\r\nimport List from \"./components/List\";\r\n\r\nfunction Home({ history }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100%\"\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          height: \"25%\"\r\n        }}\r\n      >\r\n        <Form />\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          height: \"75%\"\r\n        }}\r\n      >\r\n        <List />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nfunction NoMatch() {\r\n  return <div>no match</div>;\r\n}\r\n\r\nexport default NoMatch;\r\n","import React from \"react\";\r\n\r\nimport { Route, Switch } from \"react-router\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport Home from \"../views/Home\";\r\nimport NoMatch from \"../views/NoMatch\";\r\n\r\nfunction Routes() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route component={NoMatch} />\r\n        {/* <Route path=\"/pqrs\" exact component={Pqrs} /> */}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { createClient } from \"./client\";\nimport { GlobalStyle } from \"./styles/reset.css\";\nimport Routes from \"./routes\";\n\nfunction App() {\n  return (\n    <ApolloProvider client={createClient()}>\n      <GlobalStyle />\n      <Routes />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}